import pandas as pd
configfile: "./gene_pair_corrs.yaml"

# Add trailing /.
if not config["top_directory"].endswith("/"):
    config["top_directory"] += "/"
if not config["output_directory"].endswith("/"):
    config["output_directory"] += "/"
if not config["snakefile_dir"].endswith("/"):
    config["snakefile_dir"] += "/"
if not config["seurat_dir"].endswith("/"):
    config["seurat_dir"] += "/"

# Check if the singularity image exists.
if not os.path.exists(config["singularity_path"]):
    logger.info("Error, the singularity image does not exist.\n\nExiting.")
    exit("MissingSIFFile")

    # Check if the Seurat file exists.
if not os.path.exists(config["seurat_dir"]):
    logger.info("Error, the seurat file does not exist.\n\nExiting.")
    exit("MissingSIFFile")

# Load donor list
donor_df = pd.read_csv(config["donor_list_path"], sep = "\t", header = None)
donor_list = list(donor_df[0])

# Define metrics
metrics = ['corr', 'pval', 'zscore']

wildcard_constraints:
    n="[0-9]+"

rule all:
    input:  
        expand(config["output_directory"] + config["cohort"] + "/matrix-{meta_analysis}-corr-{ct}-top-{n}-{method}-{weight}.tsv.gz",
               meta_analysis = config["meta_analysis"],
               metric = metrics,
               ct = config["cell_type"],
               n = config["n_genes"],
               method = config["method"],
               weight = config["weight"])

rule createDonorRds:
    input: 
        config["seurat_dir"] +  "{ct}.Qced.Normalized.SCs.Rds"
    output:
        rds = temp(expand(config["output_directory"] + config["cohort"] + "/donor_rds/{donor}-{ct}-top-{n}.rds",donor=donor_list,allow_missing=True)),
        gene_list = config["output_directory"] + config["cohort"] + "/gene_list/{ct}-top-{n}-gene-list.tsv.gz",
        donor_list = config["output_directory"] + config["cohort"] + "/donor_list/{ct}-top-{n}-donor-list.tsv.gz"
    resources:
        mem_per_thread_gb =  lambda wildcards, attempt: attempt * config["create_donor"]["create_donor_memory"],
        time = lambda wildcards, attempt: config["cluster_time"][(attempt - 1) + config["create_donor"]["create_donor_time"]]
    threads: config["create_donor"]["create_donor_threads"]  
    params:
        out = config["output_directory"],
        top = config["top_directory"],
        sif = config["singularity_path"],
        scripts = config["snakefile_dir"]+"scripts/",
        cohort = config["cohort"],
        genes = config["gene_list_path"],
        donors = config["donor_list_path"]
    shell:
        """
        singularity exec --bind {params.top} {params.sif} Rscript {params.scripts}create_donor_rds.R \
            --celltype {wildcards.ct} \
            --cohort {params.cohort} \
            --genelist {params.genes} \
            --n {wildcards.n} \
            --donors {params.donors} \
            --genepath {output.gene_list} \
            --donorpath {output.donor_list} \
            --input {input} \
            --output {params.out}
        """

rule calculate_correlations:
    input:
        gene_list = config["output_directory"] + config["cohort"] + "/gene_list/{ct}-top-{n}-gene-list.tsv.gz",
        rds = config["output_directory"] + config["cohort"] + "/donor_rds/{donor}-{ct}-top-{n}.rds"
    output:
        corr = temp(expand(config["output_directory"] + config["cohort"] + "/{donor}-{metric}-{ct}-top-{n}-{method}-{weight}.tsv.gz", metric=metrics, allow_missing=True)),

    resources:
        mem_per_thread_gb =  lambda wildcards, attempt: attempt * config["process_donor"]["process_donor_memory"],
        time = lambda wildcards, attempt: config["cluster_time"][(attempt - 1) + config["process_donor"]["process_donor_time"]]
    threads: config["process_donor"]["process_donor_threads"] 
    params:
        top = config["top_directory"],
        sif = config["singularity_path"],
        scripts = config["snakefile_dir"]+"scripts/",
        cohort = config["cohort"],
        out = config["output_directory"], 
        metadata = "--metadata True" if config["metadata"] else ""
    shell:
        """
        singularity exec --bind {params.top} {params.sif} Rscript {params.scripts}process_donor_rds.R \
            --celltype {wildcards.ct} \
            --cohort {params.cohort} \
            --n {wildcards.n} \
            --donor {wildcards.donor} \
            --method {wildcards.method} \
            --weight {wildcards.weight} \
            --genelist {input.gene_list} \
            --input {input.rds} \
            --output {params.out} \
            {params.metadata} 
        """

rule aggregate_final_results:
    input:
        donor_list = config["output_directory"] + config["cohort"] + "/donor_list/{ct}-top-{n}-donor-list.tsv.gz",
        corr = expand(config["output_directory"] + config["cohort"] + "/{donor}-{metric}-{ct}-top-{n}-{method}-{weight}.tsv.gz", donor=donor_list, allow_missing=True)
    output:
        config["output_directory"] + config["cohort"] + "/combined-{metric}-{ct}-top-{n}-{method}-{weight}.tsv.gz"
    resources:
        mem_per_thread_gb = lambda wildcards, attempt: attempt * config["aggregate_metrics"]["aggregate_metrics_memory"],
        time = lambda wildcards, attempt: config["cluster_time"][(attempt - 1) + config["aggregate_metrics"]["aggregate_metrics_time"]]
    threads: config["aggregate_metrics"]["aggregate_metrics_threads"] 
    params:
        top = config["top_directory"],
        sif = config["singularity_path"],
        scripts = config["snakefile_dir"]+"scripts/",
        out = config["output_directory"],
        cohort = config["cohort"],
        out_dir = config["output_directory"]
    shell:
        """
        singularity exec --bind {params.top} {params.sif} python {params.scripts}aggregate_metrics.py \
            --celltype {wildcards.ct} \
            --cohort {params.cohort} \
            --n {wildcards.n} \
            --method {wildcards.method} \
            --weight {wildcards.weight} \
            --metric {wildcards.metric} \
            --input {input.donor_list} {params.out} \
            --output {output}      
        """

rule create_matrix:
    input: 
        donor_list = config["output_directory"] + config["cohort"] + "/donor_list/{ct}-top-{n}-donor-list.tsv.gz",
        corr = config["output_directory"] + config["cohort"] + "/combined-{metric}-{ct}-top-{n}-{method}-{weight}.tsv.gz"
    output:
        config["output_directory"] + config["cohort"] + "/matrix-{metric}-{ct}-top-{n}-{method}-{weight}.tsv.gz"
    resources:
        mem_per_thread_gb = lambda wildcards, attempt: attempt * config["create_matrix"]["create_matrix_memory"],
        time = lambda wildcards, attempt: config["cluster_time"][(attempt - 1) + config["create_matrix"]["create_matrix_time"]]
    threads: config["create_matrix"]["create_matrix_threads"] 
    params:
        top = config["top_directory"],
        sif = config["singularity_path"],
        scripts = config["snakefile_dir"]+"scripts/",
    shell:
        """ 
        singularity exec --bind {params.top} {params.sif} python {params.scripts}create_matrix.py \
            --n {wildcards.n} \
            --meta_analysis {wildcards.meta_analysis} \
            --donor_list {input.donor_list} \
            --input {input.corr} \
            --output {output}
        """